Reduce("+", l)/1000
l <- list()
for(i in 1:1000){
l[[length(l)+1]] <- sum(sample(1:2, 2, replace = T) %in% 1) >= 1
}
Reduce("+", l)/1000
l <- list()
for(i in 1:1000){
l[[length(l)+1]] <- sum(sample(1:2, 2, replace = T) %in% 1) >= 1
}
Reduce("+", l)/1000
l <- list()
for(i in 1:1000){
l[[length(l)+1]] <- sum(sample(1:3, 3, replace = T) %in% 1) >= 1
}
Reduce("+", l)/1000
l <- list()
for(i in 1:1000){
l[[length(l)+1]] <- sum(sample(1:3, 3, replace = T) %in% 1) >= 1
}
Reduce("+", l)/1000
l <- list()
for(i in 1:1000){
l[[length(l)+1]] <- sum(sample(1:3, 3, replace = T) %in% 1) >= 1
}
Reduce("+", l)/1000
l <- list()
for(i in 1:1000){
l[[length(l)+1]] <- sum(sample(1:3, 3, replace = T) %in% 1) >= 1
}
Reduce("+", l)/1000
l <- list()
for(i in 1:1000){
l[[length(l)+1]] <- sum(sample(1:3, 3, replace = T) %in% 1) >= 1
}
Reduce("+", l)/1000
l <- list()
for(i in 1:1000){
l[[length(l)+1]] <- sum(sample(1:3, 3, replace = T) %in% 1) >= 1
}
Reduce("+", l)/1000
n<-10000
l <- 1:n
for(i in 1:n){
l[i] <- sum(sample(1:3, 3, replace = T) %in% 1) >= 1
}
Reduce("+", l)/n
n<-10000
l <- 1:n
for(i in 1:n){
l[i] <- sum(sample(1:3, 3, replace = T) %in% 1) >= 1
}
Reduce("+", l)/n
7/9
19/27
175/256
n<-100000
l <- 1:n
for(i in 1:n){
l[i] <- sum(sample(1:4, 4, replace = T) %in% 1) >= 1
}
Reduce("+", l)/n
n<-100000
l <- 1:n
for(i in 1:n){
l[i] <- sum(sample(1:5, 5, replace = T) %in% 1) >= 1
}
Reduce("+", l)/n
n<-100000
l <- 1:n
for(i in 1:n){
l[i] <- sum(sample(1:3, 3, replace = T) %in% 1) >= 2
}
Reduce("+", l)/n
7/2
7/27
4/27
n<-100000
l <- 1:n
for(i in 1:n){
l[i] <- sum(sample(1:3, 3, replace = T) %in% 1) >= 2
}
Reduce("+", l)/n
n<-100000
l <- 1:n
for(i in 1:n){
l[i] <- sum(sample(1:128, 128, replace = T) %in% 1) >= 16
}
Reduce("+", l)/n
n<-100000
l <- 1:n
for(i in 1:n){
l[i] <- sum(sample(1:128, 128*16, replace = T) %in% 1) >= 16
}
Reduce("+", l)/n
n<-100000
l <- 1:n
for(i in 1:n){
l[i] <- sum(table(sample(1:4, 100, replace = T)) >= 16)
}
sum(sapply(l,function(x){x<16}))
sum(sapply(l,function(x){x<4}))
l
sum(sapply(l,function(x){x<4}))/n
n<-100000
l <- 1:n
for(i in 1:n){
l[i] <- sum(table(sample(1:4, 100, replace = T)) >= 16)
}
sum(sapply(l,function(x){x==4}))/n
n<-100000
l <- 1:n
for(i in 1:n){
l[i] <- sum(table(sample(1:4, 90, replace = T)) >= 16)
}
sum(sapply(l,function(x){x==4}))/n
n<-100000
l <- 1:n
for(i in 1:n){
l[i] <- sum(table(sample(1:4, 50, replace = T)) >= 16)
}
sum(sapply(l,function(x){x==4}))/n
n<-100000
l <- 1:n
for(i in 1:n){
l[i] <- sum(table(sample(1:4, 70, replace = T)) >= 16)
}
sum(sapply(l,function(x){x==4}))/n
n<-10000
l <- 1:n
for(i in 1:n){
l[i] <- sum(table(sample(1:4, 60, replace = T)) >= 16)
}
sum(sapply(l,function(x){x==4}))/n
n<-10000
l <- 1:n
for(i in 1:n){
l[i] <- sum(table(sample(1:4, 60, replace = T)) >= 16)
}
sum(sapply(l,function(x){x==4}))/n
n<-10000
l <- 1:n
for(i in 1:n){
l[i] <- sum(table(sample(1:4, 64, replace = T)) >= 16)
}
sum(sapply(l,function(x){x==4}))/n
n<-100000
l <- 1:n
for(i in 1:n){
l[i] <- sum(table(sample(1:4, 64, replace = T)) >= 16)
}
sum(sapply(l,function(x){x==4}))/n
n<-100000
l <- 1:n
for(i in 1:n){
l[i] <- sum(table(sample(1:4, 70, replace = T)) >= 16)
}
sum(sapply(l,function(x){x==4}))/n
n<-100000
l <- 1:n
for(i in 1:n){
l[i] <- sum(table(sample(1:2, 5, replace = T)) >= 2)
}
sum(sapply(l,function(x){x==4}))/n
sum(sapply(l,function(x){x==2}))/n
0.62521*32
setwd("~/MA_2/master-moritz_krebbel-drive_by_cache_attacks/code/r/store_forward_plot")
times <- sapply((scan("times.txt", character(), quote = "")), function(x){
if(grepl("?",x,fixed=TRUE)){
as.integer(substr(x,1,nchar(x)-1))*100000
} else as.integer(x)
})
all <- sort(as.integer(scan("all_blocks.txt", character(), quote = ""))/page_size-start_add)
diff <- unlist(sapply(1:length(all), function(i){if(i>0)all[i]-all[i-1] else all[i]}))
page_size <- 4096
start_add <- 174637056/page_size
times <- sapply((scan("times.txt", character(), quote = "")), function(x){
if(grepl("?",x,fixed=TRUE)){
as.integer(substr(x,1,nchar(x)-1))*100000
} else as.integer(x)
})
all <- sort(as.integer(scan("all_blocks.txt", character(), quote = ""))/page_size-start_add)
diff <- unlist(sapply(1:length(all), function(i){if(i>0)all[i]-all[i-1] else all[i]}))
diff
set1 <- as.integer(scan("set1.txt", character(), quote = ""))/page_size-start_add
set2 <- as.integer(scan("set2.txt", character(), quote = ""))/page_size-start_add
set3 <- as.integer(scan("set3.txt", character(), quote = ""))/page_size-start_add
set4 <- as.integer(scan("set4.txt", character(), quote = ""))/page_size-start_add
merged <- sort(c(set1,set2,set3,set4))
start <- 26
end <- 28
plot((all[start]-30):(all[end]+10), times[(all[start]-30):(all[end]+10)], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
start <- 24
end <- 28
plot((all[start]-30):(all[end]+10), times[(all[start]-30):(all[end]+10)], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
real_times <- sapply(times, function(x){if(x > 1000000) x/100000 else x})
which(times[all[start:end]]>1000000)
which(times[all[start:end]]>100000)
times[all[start:end]]>100000
plot((all[start]-30):(all[end]+10), real_times[(all[start]-30):(all[end]+10)], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
points(all[start:end], real_times[times[all[start]:all[end]]>1000000], col = "blue")
which(times[all[start]:all[end]]>1000000)
real_times[times[all[start]:all[end]]>1000000]
times[all[start]:all[end]]>1000000
times <- sapply((scan("times.txt", character(), quote = "")), function(x){
if(grepl("?",x,fixed=TRUE)){
as.integer(substr(x,1,nchar(x)-1))*100000
} else as.integer(x)
})
times <- as.vector(sapply((scan("times.txt", character(), quote = "")), function(x){
if(grepl("?",x,fixed=TRUE)){
as.integer(substr(x,1,nchar(x)-1))*100000
} else as.integer(x)
}))
real_times <- sapply(times, function(x){if(x > 1000000) x/100000 else x})
start <- 24
end <- 28
plot((all[start]-30):(all[end]+10), real_times[(all[start]-30):(all[end]+10)], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
points(all[start:end], real_times[times[all[start]:all[end]]>1000000], col = "blue")
times[all[start]:all[end]]>1000000
which(times[all[start]:all[end]]>1000000)
points(which(times[all[start]:all[end]]>1000000), real_times[times[all[start]:all[end]]>1000000], col = "blue")
real_times[times[all[start]:all[end]]>1000000]
times <- as.vector(sapply((scan("times.txt", character(), quote = "")), function(x){
if(grepl("?",x,fixed=TRUE)){
as.integer(substr(x,1,nchar(x)-1))*-1
} else as.integer(x)
}))
real_times <- sapply(times, function(x){if(x > 1000000) x/100000 else x})
start <- 24
end <- 28
plot((all[start]-30):(all[end]+10), real_times[(all[start]-30):(all[end]+10)], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
points(which(times[all[start]:all[end]]>1000000), real_times[times[all[start]:all[end]]<0], col = "blue")
real_times <- sapply(times, function(x){if(x <0) x*-1 else x})
plot((all[start]-30):(all[end]+10), real_times[(all[start]-30):(all[end]+10)], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
points(which(times[all[start]:all[end]]>1000000), real_times[times[all[start]:all[end]]<0], col = "blue")
real_times[times[all[start]:all[end]]<0]
times <- as.vector(sapply((scan("times.txt", character(), quote = "")), function(x){
if(grepl("?",x,fixed=TRUE)){
print(x)
as.integer(substr(x,1,nchar(x)-1))*-1
} else as.integer(x)
}))
which(times<0)
length(which(times<0))
times[all[start]:all[end]]
times[all[start]:all[end]]<0
real_times[times<0][all[start]:all[end]]
real_times[all[start]:all[end]][times[all[start]:all[end]]<0][all[start]:all[end]]
(real_times[all[start]:all[end]])[times[all[start]:all[end]]<0][all[start]:all[end]]
colliding_add_pos <- which(times[all[start]:all[end]] < 0) + all[start]
plot((all[start]-30):(all[end]+10), real_times[(all[start]-30):(all[end]+10)], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[all[start]:all[end]] < 0) + all[start]
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
times[all[start]:all[end]]
start <- 25
end <- 27
plot((all[start]-30):(all[end]+10), real_times[(all[start]-30):(all[end]+10)], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[all[start]:all[end]] < 0) + all[start]
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
all
start <- 25
end <- 26
plot((all[start]-30):(all[end]+10), real_times[(all[start]-30):(all[end]+10)], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[all[start]:all[end]] < 0) + all[start]
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
start <- 6700
end <- 6800
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[all[start]:all[end]] < 0) + all[start]
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
times[6700:6800]
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[all[start]:all[end]] < 0) + all[start] - 1
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[all[start]:all[end]] < 0) + all[start] + 1
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[all[start]:all[end]] < 0) + all[start] - 1
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[all[start]:all[end]] < 0) + all[start] - 10
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
start <- 6700
end <- 6800
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[all[start]:all[end]] < 0) + all[start] - 10
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
start <- 6700
end <- 6800
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[start:end] < 0) + all[start] - 10
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
start <- 6700
end <- 6800
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[start:end] < 0) + all[start]
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
start <- 6700
end <- 6800
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[start:end] < 0)
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
colliding_add_pos <- which(times[start:end] < 0) + start
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
start <- 6700
end <- 6800
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[start:end] < 0) + start - 1
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
all
177520640/4096
177520640/4096 - start_add
which(times < 0)
all - which(times < 0)
times <- as.vector(sapply((scan("times.txt", character(), quote = "")), function(x){
if(grepl("?",x,fixed=TRUE)){
print(x)
as.integer(substr(x,1,nchar(x)-1))*-1
} else as.integer(x)
}))
real_times <- sapply(times, function(x){if(x <0) x*-1 else x})
all <- sort(as.integer(scan("all_blocks.txt", character(), quote = ""))/page_size-start_add)
diff <- unlist(sapply(1:length(all), function(i){if(i>0)all[i]-all[i-1] else all[i]}))
all - which(times < 0)
all
which(times <0)
diff
all <- which(times < 0)
start <- all[54]
end <- all[56]
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[start:end] < 0) + start - 1
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
start <- all[54]-10
end <- all[56]+10
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[start:end] < 0) + start - 1
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
all
diff
times <- as.vector(sapply((scan("times.txt", character(), quote = "")), function(x){
if(grepl("?",x,fixed=TRUE)){
as.integer(substr(x,1,nchar(x)-1))*-1
} else as.integer(x)
}))
real_times <- sapply(times, function(x){if(x <0) x*-1 else x})
all <- sort(as.integer(scan("all_blocks.txt", character(), quote = ""))/page_size-start_add)
diff <- unlist(sapply(1:length(all), function(i){if(i>0)all[i]-all[i-1] else all[i]}))
diff
offvec <- all - which(times < 0)
offvec
page_size <- 4096
start_add <- 174637056/page_size + 63
times <- as.vector(sapply((scan("times.txt", character(), quote = "")), function(x){
if(grepl("?",x,fixed=TRUE)){
as.integer(substr(x,1,nchar(x)-1))*-1
} else as.integer(x)
}))
real_times <- sapply(times, function(x){if(x <0) x*-1 else x})
all <- sort(as.integer(scan("all_blocks.txt", character(), quote = ""))/page_size-start_add)
diff <- unlist(sapply(1:length(all), function(i){if(i>0)all[i]-all[i-1] else all[i]}))
offvec <- all - which(times < 0)
offvec
start <- all[54]-10
end <- all[56]
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[start:end] < 0) + start - 1
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
start <- all[54]-10
end <- all[56]+10
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[start:end] < 0) + start - 1
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
diff
start <- all[86]-10
end <- all[88]+10
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[start:end] < 0) + start - 1
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
times <- as.vector(sapply((scan("times.txt", character(), quote = "")), function(x){
if(grepl("?",x,fixed=TRUE)){
as.integer(substr(x,1,nchar(x)-1))*-1
} else as.integer(x)
}))
real_times <- sapply(times, function(x){if(x <0) x*-1 else x})
all <- sort(as.integer(scan("all_blocks.txt", character(), quote = ""))/page_size-start_add)
diff <- unlist(sapply(1:length(all), function(i){if(i>0)all[i]-all[i-1] else all[i]}))
offvec <- all - which(times < 0)
set1 <- as.integer(scan("set1.txt", character(), quote = ""))/page_size-start_add
set2 <- as.integer(scan("set2.txt", character(), quote = ""))/page_size-start_add
set3 <- as.integer(scan("set3.txt", character(), quote = ""))/page_size-start_add
set4 <- as.integer(scan("set4.txt", character(), quote = ""))/page_size-start_add
merged <- sort(c(set1,set2,set3,set4))
diff
start <- all[64]-10
end <- all[66]+10
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[start:end] < 0) + start - 1
colliding_add_pos %in% merged
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
start <- all[64]-20
end <- all[66]+20
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[start:end] < 0) + start - 1
colliding_add_pos %in% merged
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
start <- all[64]-20
end <- all[66]+30
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[start:end] < 0) + start - 1
colliding_add_pos %in% merged
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
start <- all[64]-20
end <- all[66]+20
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[start:end] < 0) + start - 1
colliding_add_pos %in% merged
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
colliding_add_pos %in% merged
colliding_add_pos
set1
sort(set1)
non_valid <- all %in% merged
non_valid
non_valid <- all[all %in% merged]
non_valid
non_valid <- all[!(all %in% merged)]
non_valid
all
start <- all[6]-20
end <- all[8]+20
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[start:end] < 0) + start - 1
colliding_add_pos %in% merged
points(colliding_add_pos, real_times[colliding_add_pos], col = "blue")
colliding_add_pos_valid <- colliding_add_pos[colliding_add_pos %in% merged]
colliding_add_pos_valid
colliding_add_pos_non_valid <- colliding_add_pos[!(colliding_add_pos %in% merged)]
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[start:end] < 0) + start - 1
colliding_add_pos_valid <- colliding_add_pos[colliding_add_pos %in% merged]
colliding_add_pos_non_valid <- colliding_add_pos[!(colliding_add_pos %in% merged)]
points(colliding_add_pos_valid, real_times[colliding_add_pos_valid], col = "blue")
points(colliding_add_pos_non_valid, real_times[colliding_add_pos_non_valid], col = "red")
start <- all[6]-20
end <- all[7]+20
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[start:end] < 0) + start - 1
colliding_add_pos_valid <- colliding_add_pos[colliding_add_pos %in% merged]
colliding_add_pos_non_valid <- colliding_add_pos[!(colliding_add_pos %in% merged)]
points(colliding_add_pos_valid, real_times[colliding_add_pos_valid], col = "blue")
points(colliding_add_pos_non_valid, real_times[colliding_add_pos_non_valid], col = "red")
start <- all[6]-10
end <- all[7]+20
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[start:end] < 0) + start - 1
colliding_add_pos_valid <- colliding_add_pos[colliding_add_pos %in% merged]
colliding_add_pos_non_valid <- colliding_add_pos[!(colliding_add_pos %in% merged)]
points(colliding_add_pos_valid, real_times[colliding_add_pos_valid], col = "blue")
points(colliding_add_pos_non_valid, real_times[colliding_add_pos_non_valid], col = "red")
start <- all[6]-10
end <- all[7]+30
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[start:end] < 0) + start - 1
colliding_add_pos_valid <- colliding_add_pos[colliding_add_pos %in% merged]
colliding_add_pos_non_valid <- colliding_add_pos[!(colliding_add_pos %in% merged)]
points(colliding_add_pos_valid, real_times[colliding_add_pos_valid], col = "blue")
points(colliding_add_pos_non_valid, real_times[colliding_add_pos_non_valid], col = "red")
start <- all[6]-10
end <- all[8]+20
plot(start:end, real_times[start:end], pch=20,
xlab="4KiB block index", ylab="SAB timer value")
colliding_add_pos <- which(times[start:end] < 0) + start - 1
colliding_add_pos_valid <- colliding_add_pos[colliding_add_pos %in% merged]
colliding_add_pos_non_valid <- colliding_add_pos[!(colliding_add_pos %in% merged)]
points(colliding_add_pos_valid, real_times[colliding_add_pos_valid], col = "blue")
points(colliding_add_pos_non_valid, real_times[colliding_add_pos_non_valid], col = "red")
