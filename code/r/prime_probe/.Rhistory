View(adult_training)
View(mushroom)
View(adult_training)
TrainID3(tree, adult_training[1:5,1:5])
data
data
data
TrainID3(tree, adult_training[,1:5])
TrainID3(tree, adult_training[,1:7])
TrainID3(tree, adult_training[,1:6])
View(adult_training)
View(adult_training)
TrainID3(tree, adult_training[,1:6])
TrainID3(tree, adult_training[1:5,1:6])
TrainID3(tree, adult_training[1:50,1:6])
TrainID3(tree, adult_training[1:500,1:6])
TrainID3(tree, adult_training[1:5000,1:6])
TrainID3(tree, adult_training[,1:6])
env <- environment()
NordAmericain <- function(eatsBreakfast=TRUE,myFavorite="cereal")
{
## Get the environment for this
## instance of the function.
thisEnv <- environment()
hasBreakfast <- eatsBreakfast
favoriteBreakfast <- myFavorite
## Create the list used to represent an
## object for this class
me <- list(
## Define the environment where this list is defined so
## that I can refer to it later.
thisEnv = thisEnv,
## Define the accessors for the data fields.
getEnv = function()
{
return(get("thisEnv",thisEnv))
},
getHasBreakfast = function()
{
return(get("hasBreakfast",thisEnv))
},
setHasBreakfast = function(value)
{
return(assign("hasBreakfast",value,thisEnv))
},
getFavoriteBreakfast = function()
{
return(get("favoriteBreakfast",thisEnv))
},
setFavoriteBreakfast = function(value)
{
return(assign("favoriteBreakfast",value,thisEnv))
}
)
## Define the value of the list within the current environment.
assign('this',me,envir=thisEnv)
## Set the name for the class
class(me) <- append(class(me),"NordAmericain")
return(me)
}
n <- NordAmericain()
UseMethod("hasBreakfast", me)
n$getHasBreakfast()
b <- n$getEnv()
ls(envir = b)
c(100,100)^2
c(100,100)^2 > 100
getClasses()
Account <- setRefClass("Account",
fields = list(balance = "numeric"))
a <- Account$new(balance = 100)
a$balance
a <- Account$new(balance = 100)
b <- Account$new(balance = 200)
a$balance
b$balance
list(a=0, b=1)
max(list(a=0, b=1))
list(a=0, b=1)
max(list(a=0, b=1))
max(c(a=0, b=1))
max(c(a=0, b=3))
c(a=0, b=3)
1.0*e^-10
1.0*10^-10
exp(2)
if(5==5){
d <- 3
}
print(d)
sum(c(a=3,b=3))
weighted[1] <- 1
weighted <- array()
weighted[1] <- 1
weighted
range(weighted)
range(n)
d /= 3
expo_mech(epsilon, sens, class_counts)
{
max_count = lapply(class_counts, function(x))
weighted <- array() #score values
for(i in 1:length(class_counts))
{
if(class_counts[i] == max_count)
{
if(s<10^-10) {
power <- 50 # e^50 is already astronomical. sizes beyond that dont matter
}
else {
power <- min(50, (epsilon*1)/(2*sens)) # score = 1
}
}
else {
power <- 0 #score 0
}
weighted[i] <- exp(power)
}
sum_weighted <- sum(weighted)
for(i in 1:length(weighted))
{
weighted[i] <- weighted[i] / sum_weighted
}
sampleDist = function(n) {
sample(x = 1:length(weighted), n, replace = T, prob = weighted)
}
return(sampleDist(1))
}
expo_mech(epsilon, sens, class_counts)
{
max_count = lapply(class_counts, function(x))
weighted <- array() #score values
for(i in 1:length(class_counts))
{
if(class_counts[i] == max_count)
{
if(s<10^-10) {
power <- 50 # e^50 is already astronomical. sizes beyond that dont matter
}
else {
power <- min(50, (epsilon*1)/(2*sens)) # score = 1
}
}
else {
power <- 0 #score 0
}
weighted[i] <- exp(power)
}
sum_weighted <- sum(weighted)
for(i in 1:length(weighted))
{
weighted[i] <- weighted[i] / sum_weighted
}
#draw sample from weighted dist
return(sample(x = 1:length(weighted), 1, replace = T, prob = weighted))
}
expo_mech(epsilon, sens, class_counts)
{
max_count = lapply(class_counts, function(x))
weighted <- array() #score values
for(i in 1:length(class_counts))
{
if(class_counts[i] == max_count)
{
if(s<10^-10) {
power <- 50 # e^50 is already astronomical. sizes beyond that dont matter
}
else {
power <- min(50, (epsilon*1)/(2*sens)) # score = 1
}
}
else {
power <- 0 #score 0
}
weighted[i] <- exp(power)
}
sum_weighted <- sum(weighted)
for(i in 1:length(weighted))
{
weighted[i] <- weighted[i] / sum_weighted
}
#draw sample from weighted dist
return(sample(x = 1:length(weighted), 1, replace = T, prob = weighted))
}
expo_mech <- function(epsilon, sens, class_counts)
{
max_count = lapply(class_counts, function(x))
weighted <- array() #score values
for(i in 1:length(class_counts))
{
if(class_counts[i] == max_count)
{
if(s<10^-10) {
power <- 50 # e^50 is already astronomical. sizes beyond that dont matter
}
else {
power <- min(50, (epsilon*1)/(2*sens)) # score = 1
}
}
else {
power <- 0 #score 0
}
weighted[i] <- exp(power)
}
sum_weighted <- sum(weighted)
for(i in 1:length(weighted))
{
weighted[i] <- weighted[i] / sum_weighted
}
#draw sample from weighted dist
return(sample(x = 1:length(weighted), 1, replace = T, prob = weighted))
}
expo_mech <- function(epsilon, sens, class_counts)
{
max_count = lapply(class_counts, function(x))
weighted <- array() #score values
for(i in 1:length(class_counts))
{
if(class_counts[i] == max_count)
{
if(s<10^-10) {
power <- 50 # e^50 is already astronomical. sizes beyond that dont matter
}
else {
power <- min(50, (epsilon*1)/(2*sens)) # score = 1
}
}
else {
power <- 0 #score 0
}
weighted[i] <- exp(power)
}
sum_weighted <- sum(weighted)
for(i in 1:length(weighted))
{
weighted[i] <- weighted[i] / sum_weighted
}
#draw sample from weighted dist
return(sample(x = 1:length(weighted), 1, replace = T, prob = weighted))
}
source('~/MA_R/masterR/R/dp_random_forest.R')
source('~/MA_R/masterR/R/dp_random_forest.R')
expo_mech(1,1, c(a=10,b=9,c=3))
source('~/MA_R/masterR/R/dp_random_forest.R')
expo_mech(1,1, c(a=10,b=9,c=3))
source('~/MA_R/masterR/R/dp_random_forest.R')
expo_mech(1,1, c(a=10,b=9,c=3))
expo_mech(1,1, c(a=10,b=9,c=3))
expo_mech(1,1, c(a=10,b=9,c=3))
expo_mech(1,1, c(a=10,b=9,c=3))
expo_mech(1,1, c(a=10,b=9,c=3))
expo_mech(1,1, c(a=10,b=9,c=3))
expo_mech(1,1, c(a=10,b=9,c=3))
expo_mech(1,1, c(a=10,b=9,c=3))
expo_mech(1,1, c(a=10,b=9,c=3))
expo_mech(1,1, c(a=10,b=9,c=3))
expo_mech(1,1, c(a=10,b=9,c=3))
expo_mech(1,1, c(a=10,b=9,c=3))
expo_mech(1,1, c(a=10,b=9,c=3))
expo_mech(1,1, c(a=10,b=9,c=3))
exp(0.5)
sort(c(a=3,b=2,c=1))
sort(c(a=3,b=2,c=1), decreasing = T)
sample(c("asd","sdf","sd"),1)
sample(c("asd","sdf","sd"),1)
sample(c("asd","sdf","sd"),1)
install.packages("mlbench")
library("mlbench", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
a <- mlbench.2dnormals(100)
show(a$x)
plot(a)
p<-mlbench.circle(300,2)
plot(p)
p <- mlbench.cuboids(7000)
plot(p)
mlbench.hypercube(n=800, d=3, sides=rep(1,d), sd=0.1)
d <- 3
mlbench.hypercube(n=800, d=3, sides=rep(1,d), sd=0.1)
hypercube(d)
p <- mlbench.hypercube()
plot(p)
p <- mlbench.peak(n,d=20)
p <- mlbench.peak(100,20)
remove.packages("CVST", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("Cubist", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("crayon", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("caret", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("visNetwork", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("DiagrammeR", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("DRR", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("dimRed", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("irlba", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("matlab", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("kernlab", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("influenceR", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("lme4", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("gower", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("lava", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("markovchain", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("pillar", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("SQUAREM", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("Rook", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("R.cache", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
tbl <- read.table("/tmp/l3_timer_log.txt")
View(tbl)
diamonds
library(ggplot2)
dimaonds
diamonds
tbl_melt <- reshape2::melt(tbl)
View(tbl_melt)
rep(1, 2)
tbl_melt[["sample"]] <- rep(1:nrows(tbl), ncols(tbl))
tbl_melt[["sample"]] <- rep(1:rows(tbl), ncols(tbl))
tbl_melt[["sample"]] <- rep(1:nrow(tbl), ncol(tbl))
View(tbl_melt)
colnames(tbl_melt)[1] <- "es"
ggplot2::geom_bin2d(mapping = ggplot2::aes(x=sample,y=es), data = tbl)
ggplot2::ggplot(mapping = ggplot2::aes(x=sample,y=es), data = tbl) +
geom_bin2d()
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
geom_bin2d()
View(tbl_melt)
tbl <- tbl[,1:10]
tbl_melt <- reshape2::melt(tbl, )
tbl_melt[["sample"]] <- rep(1:nrow(tbl), ncol(tbl))
colnames(tbl_melt)[1] <- "es"
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
geom_bin2d()
View(tbl_melt)
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
geom_bin2d(aes(fill=value))
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es,fill=value)) +
geom_bin2d()
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
stat_bin_2d(aes(fill=value))
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
stat_bin_2d()
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
scale_fill_gradient(low = "white", high = "steelblue"))
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
scale_fill_gradient(low = "white", high = "steelblue")
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
ggplot2::geom_tile(ggplot2::aes(fill = value) +
ggplot2::scale_fill_gradient(low = "white", high = "steelblue")
source('~/MA_2/master-moritz_krebbel-drive_by_cache_attacks/code/r/prime_probe/visualize_times.R')
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
ggplot2::geom_tile(ggplot2::aes(fill = value)) +
ggplot2::scale_fill_gradient(low = "white", high = "steelblue")
max(tbl_melt[,2])
View(tbl_melt)
tbl_melt[,"value" > 3500] <- 3500
View(tbl_melt)
tbl_melt[["value" > 3500]] <- 3500
tbl <- read.table("/tmp/l3_timer_log.txt")
tbl <- tbl[,1:10]
tbl_melt <- reshape2::melt(tbl, )
tbl_melt[["sample"]] <- rep(1:nrow(tbl), ncol(tbl))
colnames(tbl_melt)[1] <- "es"
#cap at 3500
tbl_melt[["value" > 3500]] <- 3500
View(tbl_melt)
tbl <- read.table("/tmp/l3_timer_log.txt")
tbl <- tbl[,1:10]
tbl_melt <- reshape2::melt(tbl, )
tbl_melt[["sample"]] <- rep(1:nrow(tbl), ncol(tbl))
colnames(tbl_melt)[1] <- "es"
#cap at 3500
tbl_melt[tbl_melt$value>3500,"value"] <- 3500
View(tbl_melt)
max(tbl_melt[,"value"])
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
ggplot2::geom_tile(ggplot2::aes(fill = value)) +
ggplot2::scale_fill_gradient(low = "white", high = "steelblue")
tbl <- read.table("/tmp/l3_timer_log.txt")
tbl <- tbl[,1:100]
tbl_melt <- reshape2::melt(tbl, )
tbl_melt[["sample"]] <- rep(1:nrow(tbl), ncol(tbl))
colnames(tbl_melt)[1] <- "es"
#cap at 3500
tbl_melt[tbl_melt$value>3500,"value"] <- 3500
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
ggplot2::geom_tile(ggplot2::aes(fill = value)) +
ggplot2::scale_fill_gradient(low = "white", high = "steelblue")
tbl <- read.table("/tmp/l3_timer_log.txt")
tbl <- tbl[,1:100]
tbl_melt <- reshape2::melt(tbl, )
tbl_melt[["sample"]] <- rep(1:nrow(tbl), ncol(tbl))
colnames(tbl_melt)[1] <- "es"
#cap at 3500
max_value <- 2000
tbl_melt[tbl_melt$value>max_value,"value"] <- max_value
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
ggplot2::geom_tile(ggplot2::aes(fill = value)) +
ggplot2::scale_fill_gradient(low = "white", high = "steelblue")
tbl <- read.table("/tmp/l3_timer_log.txt")
tbl <- tbl[,1:256]
tbl_melt <- reshape2::melt(tbl, )
tbl_melt[["sample"]] <- rep(1:nrow(tbl), ncol(tbl))
colnames(tbl_melt)[1] <- "es"
#cap at 3500
max_value <- 2000
tbl_melt[tbl_melt$value>max_value,"value"] <- max_value
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
ggplot2::geom_tile(ggplot2::aes(fill = value)) +
ggplot2::scale_fill_gradient(low = "white", high = "steelblue")
#x-axis eviction sets, y-axis samples
tbl <- read.table("/tmp/l3_timer_log.txt")
tbl <- tbl[,1:256]
tbl_melt <- reshape2::melt(tbl, )
tbl_melt[["sample"]] <- rep(1:nrow(tbl), ncol(tbl))
colnames(tbl_melt)[1] <- "es"
#cap at 3500
max_value <- 2000
tbl_melt[tbl_melt$value>max_value,"value"] <- max_value
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
ggplot2::geom_tile(ggplot2::aes(fill = value)) +
ggplot2::scale_fill_gradient(low = "white", high = "steelblue")
#x-axis eviction sets, y-axis samples
tbl <- read.table("/tmp/l3_timer_log.txt")
tbl <- tbl[,128:256]
tbl_melt <- reshape2::melt(tbl, )
tbl_melt[["sample"]] <- rep(1:nrow(tbl), ncol(tbl))
colnames(tbl_melt)[1] <- "es"
#cap at 3500
max_value <- 2000
tbl_melt[tbl_melt$value>max_value,"value"] <- max_value
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
ggplot2::geom_tile(ggplot2::aes(fill = value)) +
ggplot2::scale_fill_gradient(low = "white", high = "steelblue")
View(tbl_melt)
View(tbl_melt)
#x-axis eviction sets, y-axis samples
tbl <- read.table("/tmp/l3_timer_log.txt")
tbl <- tbl[,1:256]
tbl_melt <- reshape2::melt(tbl, )
tbl_melt[["sample"]] <- rep(1:nrow(tbl), ncol(tbl))
colnames(tbl_melt)[1] <- "es"
#cap at 3500
max_value <- 2000
tbl_melt[tbl_melt$value>max_value,"value"] <- max_value
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
ggplot2::geom_tile(ggplot2::aes(fill = value)) +
ggplot2::scale_fill_gradient(low = "white", high = "steelblue")
#x-axis eviction sets, y-axis samples
tbl <- read.table("/tmp/test.txt")
tbl <- tbl[,1:256]
tbl_melt <- reshape2::melt(tbl, )
tbl_melt[["sample"]] <- rep(1:nrow(tbl), ncol(tbl))
colnames(tbl_melt)[1] <- "es"
#cap at 3500
max_value <- 2000
tbl_melt[tbl_melt$value>max_value,"value"] <- max_value
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
ggplot2::geom_tile(ggplot2::aes(fill = value)) +
ggplot2::scale_fill_gradient(low = "white", high = "steelblue")
visualize_times <- function(file_name){
#x-axis eviction sets, y-axis samples
tbl <- read.table(paste0("/tmp/", file_name))
tbl <- tbl[,1:256]
tbl_melt <- reshape2::melt(tbl, )
tbl_melt[["sample"]] <- rep(1:nrow(tbl), ncol(tbl))
colnames(tbl_melt)[1] <- "es"
#cap at 3500
max_value <- 2000
tbl_melt[tbl_melt$value>max_value,"value"] <- max_value
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
ggplot2::geom_tile(ggplot2::aes(fill = value)) +
ggplot2::scale_fill_gradient(low = "white", high = "steelblue")
}
visualize_times("test.txt")
visualize_times("test.txt")
visualize_times("test2.txt")
visualize_times("test.txt")
visualize_times("test2.txt")
visualize_times("test3.txt")
visualize_times("test4.txt")
visualize_times("test5.txt")
visualize_times("test6.txt")
visualize_times("test4.txt")
visualize_times("test7.txt")
visualize_times("test4.txt")
visualize_times <- function(file_name){
#x-axis eviction sets, y-axis samples
tbl <- read.table(paste0("/tmp/", file_name))
tbl <- tbl[,1:256]
tbl_melt <- reshape2::melt(tbl, )
tbl_melt[["sample"]] <- rep(1:nrow(tbl), ncol(tbl))
colnames(tbl_melt)[1] <- "es"
#cap at 3500
max_value <- 2000
tbl_melt[tbl_melt$value>max_value,"value"] <- max_value
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
ggplot2::geom_tile(ggplot2::aes(fill = value)) +
ggplot2::scale_fill_gradient(low = "white", high = "steelblue")
}
visualize_times("test4.txt")
install.packages("Rserve")
library("Rserve", lib.loc="/usr/local/lib/R/site-library")
detach("package:Rserve", unload=TRUE)
library("Rserve", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
detach("package:Rserve", unload=TRUE)
install.packages("shiny")
remove.packages("shiny", lib="/usr/local/lib/R/site-library")
remove.packages("shiny", lib="/usr/local/lib/R/site-library")
install.packages("plumber")
install.packages("plumber")
setwd("~/MA_2/master-moritz_krebbel-drive_by_cache_attacks//code/r/prime_probe/")
plumber::plumb("plumber.R")$run(port=8000)
plumber::plumb("plumber.R")$run(port=8000)
plumber::plumb("plumber.R")$run(port=8000)
plumber::plumb("plumber.R")$run(port=8000)
