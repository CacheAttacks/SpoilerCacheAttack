ggplot2::scale_fill_gradient(low = "white", high = "steelblue")
}
visualize_times("test.txt")
visualize_times("test.txt")
visualize_times("test2.txt")
visualize_times("test.txt")
visualize_times("test2.txt")
visualize_times("test3.txt")
visualize_times("test4.txt")
visualize_times("test5.txt")
visualize_times("test6.txt")
visualize_times("test4.txt")
visualize_times("test7.txt")
visualize_times("test4.txt")
visualize_times <- function(file_name){
#x-axis eviction sets, y-axis samples
tbl <- read.table(paste0("/tmp/", file_name))
tbl <- tbl[,1:256]
tbl_melt <- reshape2::melt(tbl, )
tbl_melt[["sample"]] <- rep(1:nrow(tbl), ncol(tbl))
colnames(tbl_melt)[1] <- "es"
#cap at 3500
max_value <- 2000
tbl_melt[tbl_melt$value>max_value,"value"] <- max_value
ggplot2::ggplot(tbl_melt, ggplot2::aes(x=sample,y=es)) +
ggplot2::geom_tile(ggplot2::aes(fill = value)) +
ggplot2::scale_fill_gradient(low = "white", high = "steelblue")
}
visualize_times("test4.txt")
install.packages("Rserve")
library("Rserve", lib.loc="/usr/local/lib/R/site-library")
detach("package:Rserve", unload=TRUE)
library("Rserve", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
detach("package:Rserve", unload=TRUE)
install.packages("shiny")
remove.packages("shiny", lib="/usr/local/lib/R/site-library")
remove.packages("shiny", lib="/usr/local/lib/R/site-library")
install.packages("plumber")
install.packages("plumber")
Reduce(*,c(1,2,3))
Reduce(mult,c(1,2,3))
Reduce('*',c(1,2,3))
6^4
.Last.value^2
balls <- 16
bins <- 28
full_bins <- 16
calc_prob_exact(balls,bins,full_bins)
calc_prob_exact <- function(balls, bins, full_bins){
#[prod x=0 to full_bins-1 ((bins-x)/bins)]
res <- Reduce('*', lapply(1:(full_bins-1), function(x) (bins-x)/bins), init = 1)
res <- res * (full_bins/bins)^(balls-bins)
return(res)
}
calc_prob_exact(balls,bins,full_bins)
calc_prob_exact <- function(balls, bins, full_bins){
#[prod x=0 to full_bins-1 ((bins-x)/bins)]
res <- Reduce('*', lapply(1:(full_bins-1), function(x) (bins-x)/bins), init = 1)
print(res)
res <- res * (full_bins/bins)^(balls-bins)
return(res)
}
calc_prob_exact(balls,bins,full_bins)
calc_prob_exact <- function(balls, bins, full_bins){
#[prod x=0 to full_bins-1 ((bins-x)/bins)]
res <- Reduce('*', lapply(1:(full_bins-1), function(x) (bins-x)/bins), init = 1)
print(res)
if(balls > full_bins)
res <- res * (full_bins/bins)^(balls-full_bins)
return(res)
}
calc_prob_exact(balls,bins,full_bins)
lapply(1:16, function(x) calc_prob_exact(balls,bins,x))
sapply(1:16, function(x) calc_prob_exact(balls,bins,x))
calc_prob_exact <- function(balls, bins, full_bins){
#[prod x=0 to full_bins-1 ((bins-x)/bins)]
res <- Reduce('*', lapply(1:(full_bins-1), function(x) (bins-x)/bins), init = 1)
if(balls > full_bins)
res <- res * (full_bins/bins)^(balls-full_bins)
return(res)
}
sapply(1:16, function(x) calc_prob_exact(balls,bins,x))
sum(sapply(1:16, function(x) calc_prob_exact(balls,bins,x)))
sapply(1:28, function(x) calc_prob_exact(balls,bins,x))
calc_prob_lower_bound <- function(balls, bins, full_bins){
#[prod x=0 to full_bins-1 ((bins-x)/bins)]
res <- Reduce('*', lapply(1:(full_bins-1), function(x) (bins-x)/bins), init = 1)
return(res)
}
calc_prob_lower_bound <- function(balls, bins, full_bins){
if(balls < full_bins)
return(0)
#[prod x=0 to full_bins-1 ((bins-x)/bins)]
res <- Reduce('*', lapply(1:(full_bins-1), function(x) (bins-x)/bins), init = 1)
return(res)
}
calc_prob_lower_bound <- function(balls, bins, full_bins){
if(balls < full_bins)
return(0)
#[prod x=0 to full_bins-1 ((bins-x)/bins)]
res <- Reduce('*', lapply(1:(full_bins-1), function(x) (bins-x)/bins), init = 1)
return(res)
}
sapply(1:16, function(x) calc_prob_lower_bound(balls,bins,x))
sapply(1:16, function(x) calc_prob_upper_bound(balls,bins,x))
calc_prob_upper_bound <- function(balls, bins, full_bins){
if(full_bins >= balls)
return(1)
(full_bins/bins)^(balls-full_bins)
}
sapply(1:16, function(x) calc_prob_upper_bound(balls,bins,x))
1:0
0:0
calc_prob_exact <- function(balls, bins, full_bins){
#[prod x=0 to full_bins-1 ((bins-x)/bins)]
res <- Reduce('*', lapply(0:(full_bins-1), function(x) (bins-x)/bins), init = 1)
if(balls > full_bins)
res <- res * (full_bins/bins)^(balls-full_bins)
return(res)
}
calc_prob_lower_bound <- function(balls, bins, full_bins){
if(balls < full_bins)
return(0)
#[prod x=0 to full_bins-1 ((bins-x)/bins)]
res <- Reduce('*', lapply(0:(full_bins-1), function(x) (bins-x)/bins), init = 1)
return(res)
}
sapply(1:16, function(x) calc_prob_lower_bound(balls,bins,x))
sapply(1:16, function(x) calc_prob_upper_bound(balls,bins,x))
bins <- 16
sapply(1:16, function(x) calc_prob_lower_bound(balls,bins,x))
sapply(1:16, function(x) calc_prob_upper_bound(balls,bins,x))
sapply(1:16, function(x) calc_prob_exact(balls,bins,x))
sapply(1:16, function(x) calc_prob_lower_bound(balls,bins,x)*calc_prob_upper_bound(balls,bins,x))
choose(2,1)
calc_prob_exact <- function(balls, bins, full_bins){
#[prod x=0 to full_bins-1 ((bins-x)/bins)]
res <- Reduce('*', lapply(0:(full_bins-1), function(x) (bins-x)/bins), init = 1)
if(balls > full_bins)
res <- res * (full_bins/bins)^(balls-full_bins) * choose(balls, balls-full_bins)
return(res)
}
sapply(1:16, function(x) calc_prob_exact(balls,bins,x))
sum(sapply(1:16, function(x) calc_prob_exact(balls,bins,x)))
calc_prob_exact <- function(balls, bins, full_bins){
#[prod x=0 to full_bins-1 ((bins-x)/bins)]
res <- Reduce('*', lapply(0:(full_bins-1), function(x) (bins-x)/bins), init = 1)
if(balls > full_bins)
res <- res * (full_bins/bins)^(balls-full_bins) * choose(balls, balls-full_bins-1)
return(res)
}
sum(sapply(1:16, function(x) calc_prob_exact(balls,bins,x)))
sapply(1:17, function(x) calc_prob_exact(balls,bins,x))
sapply(0:17, function(x) calc_prob_exact(balls,bins,x))
sapply(1:16, function(x) calc_prob_exact(balls,bins,x))
bins_dist <- length(unique(sample(1:bins, balls)))
bins_dist <- length(unique(sample(1:bins, balls)))
sample(1:bins, balls)
bins_dist <- length(unique(sample(1:bins, balls, replace = T)))
bins_dist <- length(unique(sample(1:bins, balls, replace = T)))
real_test <- function(balls, bins, iterations){
count_vec <- numeric(bins)
for(i in 1:iterations){
val <- length(unique(sample(1:bins, balls, replace = T)))
count_vec[val] <- count_vec[val] + 1
}
for(i in 1:length(count_vec)){
print("i:" + i + "=")
}
}
real_test(balls,bins,10)
real_test <- function(balls, bins, iterations){
count_vec <- numeric(bins)
for(i in 1:iterations){
val <- length(unique(sample(1:bins, balls, replace = T)))
count_vec[val] <- count_vec[val] + 1
}
for(i in 1:length(count_vec)){
print(paste0("i:", i , "="))
}
}
real_test(balls,bins,10)
real_test <- function(balls, bins, iterations){
count_vec <- numeric(bins)
for(i in 1:iterations){
val <- length(unique(sample(1:bins, balls, replace = T)))
count_vec[val] <- count_vec[val] + 1
}
for(i in 1:length(count_vec)){
print(paste0("i:", i , "=", count_vec[i]))
}
}
real_test(balls,bins,10)
real_test(balls,bins,100000)
real_test <- function(balls, bins, iterations){
count_vec <- numeric(bins)
for(i in 1:iterations){
val <- length(unique(sample(1:bins, balls, replace = T)))
count_vec[val] <- count_vec[val] + 1
}
sum_count_vec <- sum(count_vec)
for(i in 1:length(count_vec)){
print(paste0("i:", i , "=", count_vec[i], "(", count_vec[i]/sum(count_vec), ")"))
}
}
real_test(balls,bins,100000)
real_test(balls,bins,1000000)
sapply(1:16, function(x) calc_prob_exact(balls,bins,x))
sapply(1:16, function(x) calc_prob_lower_bound(balls,bins,x))
sapply(1:16, function(x) calc_prob_upper_bound(balls,bins,x))
calc_prob_exact <- function(balls, bins, full_bins){
#[prod x=0 to full_bins-1 ((bins-x)/bins)]
res <- Reduce('*', lapply(0:(full_bins-1), function(x) (bins-x)/bins), init = 1)
if(balls > full_bins)
res <- res * (full_bins/bins)^(balls-full_bins) #* choose(balls, balls-full_bins)
return(res)
}
_
sapply(1:16, function(x) calc_prob_exact(balls,bins,x))
exact <- sapply(1:16, function(x) calc_prob_exact(balls,bins,x))
exact/sum(exact)
real_test(3,4,1000000)
real_test(3,3,1000000)
choose(3,2)
choose(2,1)
real_test(3,5,1000000)
real_test(4,5,1000000)
choose(5,2)
choose(4,2)
choose(7,2)
sapply(1:4, function(x) calc_prob_upper_bound(4,5,x))
choose(5,3)
7.2*5
72*5
coupon_prob <- function(bins, i){
bins/(bins-i+1)
}
coupon_prob(5,1)
coupon_prob(5,2)
coupon_prob <- function(balls, bins){
needed_balls <- 0
for(i in 1:bins){
next_ball_avg <- bins/(bins-i+1)
needed_balls <- needed_balls + next_ball_avg
if(needed_balls > balls)
return(i)
}
}
coupon_prob(16,16)
empty_bins <- function(balls, bins){
needed_balls <- 0
for(i in 1:bins){
#coupon_prob
next_ball_avg <- bins/(bins-i+1)
needed_balls <- needed_balls + next_ball_avg
if(needed_balls > balls)
return(bins-i)
}
}
empty_bins(16,16)
empty_bins(16,28)
choose(2,1)
2!
factorial(3)
install.packages("gmp")
gmp::Stirling2(3,2)
as.numeric(gmp::Stirling2(3,2))
calc_prob_exact_sterling(balls, bins, full_bins){
#bins choose full_bins * full_bins! * S(balls,full_bins)
combs <- choose(bins, full_bins) * factorial(full_bins) *
as.numeric(gmp::Stirling2(balls, full_bins))
all_combs <- bins^balls
prob <- combs/all_combs
return(prob)
}
calc_prob_exact_sterling <- function(balls, bins, full_bins){
#bins choose full_bins * full_bins! * S(balls,full_bins)
combs <- choose(bins, full_bins) * factorial(full_bins) *
as.numeric(gmp::Stirling2(balls, full_bins))
all_combs <- bins^balls
prob <- combs/all_combs
return(prob)
}
calc_prob_exact_sterling(3,3,2)
calc_prob_exact_sterling(3,3,1)
calc_prob_exact_sterling(3,3,3)
calc_prob_exact_sterling(4,5,2)
28/125
calc_prob_exact_sterling(16,16,12)
calc_prob_exact_sterling(16,16,10)
calc_prob_exact_sterling(16,16,17)
calc_prob_exact_sterling <- function(balls, bins, full_bins){
if(full_bins > balls)
return(0)
#bins choose full_bins * full_bins! * S(balls,full_bins)
combs <- choose(bins, full_bins) * factorial(full_bins) *
as.numeric(gmp::Stirling2(balls, full_bins))
all_combs <- bins^balls
prob <- combs/all_combs
return(prob)
}
calc_prob_exact_sterling(16,16,17)
calc_prob_exact_sterling(16,16,16)
calc_prob_exact_sterling(16,16,1)
calc_free_bins_avg <- function(balls, bins){
free_bins <- 0
for(i in 1:balls){
free_bins <- calc_prob_exact_sterling(balls, bins, i) * (bins-i)
}
return(free_bins)
}
calc_free_bins_avg(16,16)
calc_free_bins_avg <- function(balls, bins){
free_bins <- 0
for(i in 1:balls){
free_bins <- free_bins + calc_prob_exact_sterling(balls, bins, i) * (bins-i)
}
return(free_bins)
}
calc_free_bins_avg(16,16)
16-calc_free_bins_avg(16,16)
calc_free_bins_avg(16,28)
calc_free_bins_avg(16,18)
calc_free_bins_avg(16,15)
calc_free_bins_avg(16,12)
calc_free_bins_avg(16,10)
calc_free_bins_avg(16,14)
calc_free_bins_avg(16,4)
calc_free_bins_avg(16,10)
calc_free_bins_avg(16,9)
calc_free_bins_avg(16,7)
calc_free_bins_avg(16,40)
calc_free_bins_avg(16,50)
calc_free_bins_avg(16,20)
get_contract_perfect_del_number <- function(associativity, avg_es_size, avg_prime_probe_time){
last_saved_prime_probes <- 0
for(del_number in 5:50){
groups <- avg_es_size / del_number
#unrealistic assumption, cause actually there are more than 16 memory blocks in the avg es
#which correspond to the same cache set
free_groups <- calc_free_bins_avg(associativity, groups)
#groups * 2 for management overhead
saved_prime_probes <- free_groups * del_number - (groups * 2)
if(saved_prime_probes > last_saved_prime_probes){
last_saved_prime_probes <- saved_prime_probes
} else{
return(del_number-1)
}
}
}
get_contract_perfect_del_number <- function(associativity, avg_es_size, avg_prime_probe_time=0){
last_saved_prime_probes <- 0
for(del_number in 5:50){
groups <- avg_es_size / del_number
#unrealistic assumption, cause actually there are more than 16 memory blocks in the avg es
#which correspond to the same cache set
free_groups <- calc_free_bins_avg(associativity, groups)
#groups * 2 for management overhead
saved_prime_probes <- free_groups * del_number - (groups * 2)
if(saved_prime_probes > last_saved_prime_probes){
last_saved_prime_probes <- saved_prime_probes
} else{
return(del_number-1)
}
}
}
get_contract_perfect_del_number(16, 1000)
get_contract_perfect_del_number <- function(associativity, avg_es_size, avg_prime_probe_time=0){
last_saved_prime_probes <- 0
for(del_number in 5:50){
groups <- avg_es_size / del_number
#unrealistic assumption, cause actually there are more than 16 memory blocks in the avg es
#which correspond to the same cache set
free_groups <- calc_free_bins_avg(associativity, groups)
#groups * 2 for management overhead
saved_prime_probes <- free_groups * del_number - (groups * 2)
if(saved_prime_probes > last_saved_prime_probes){
last_saved_prime_probes <- saved_prime_probes
} else{
print(last_saved_prime_probes)
return(del_number-1)
}
}
}
get_contract_perfect_del_number(16, 1000)
get_contract_perfect_del_number(16, 343)
get_contract_perfect_del_number(16, 193)
get_contract_perfect_del_number(16, 150)
get_contract_perfect_del_number <- function(associativity, avg_es_size, avg_prime_probe_time=0){
last_saved_prime_probes <- 0
for(del_number in 1:50){
groups <- avg_es_size / del_number
#unrealistic assumption, cause actually there are more than 16 memory blocks in the avg es
#which correspond to the same cache set
free_groups <- calc_free_bins_avg(associativity, groups)
#groups * 2 for management overhead
saved_prime_probes <- free_groups * del_number - (groups * 2)
if(saved_prime_probes > last_saved_prime_probes){
last_saved_prime_probes <- saved_prime_probes
} else{
print(last_saved_prime_probes)
return(del_number-1)
}
}
}
get_contract_perfect_del_number(16, 343)
get_contract_perfect_del_number(16, 1000)
get_contract_perfect_del_number <- function(associativity, avg_es_size, avg_prime_probe_time=0){
last_saved_prime_probes <- 0
for(del_number in 1:50){
groups <- avg_es_size / del_number
#unrealistic assumption, cause actually there are more than 16 memory blocks in the avg es
#which correspond to the same cache set
free_groups <- calc_free_bins_avg(associativity, groups)
#groups * 2 for management overhead
saved_prime_probes <- free_groups * del_number - (groups * 2)
if(saved_prime_probes > last_saved_prime_probes && last_saved_prime_probes > 0){
last_saved_prime_probes <- saved_prime_probes
} else{
print(last_saved_prime_probes)
return(del_number-1)
}
}
return("error")
}
get_contract_perfect_del_number(16, 1000)
get_contract_perfect_del_number <- function(associativity, avg_es_size, avg_prime_probe_time=0){
last_saved_prime_probes <- 0
for(del_number in 1:50){
groups <- avg_es_size / del_number
#unrealistic assumption, cause actually there are more than 16 memory blocks in the avg es
#which correspond to the same cache set
free_groups <- calc_free_bins_avg(associativity, groups)
#groups * 2 for management overhead
saved_prime_probes <- free_groups * del_number - (groups * 2)
if(saved_prime_probes > last_saved_prime_probes || last_saved_prime_probes == 0){
last_saved_prime_probes <- saved_prime_probes
} else{
print(last_saved_prime_probes)
return(del_number-1)
}
}
return("error")
}
get_contract_perfect_del_number(16, 1000)
get_contract_perfect_del_number(16, 343)
get_contract_perfect_del_number(16, 150)
get_contract_perfect_del_number <- function(associativity, avg_es_size, avg_prime_probe_time=0){
last_saved_prime_probes <- 0
for(del_number in 1:50){
groups <- avg_es_size / del_number
#unrealistic assumption, cause actually there are more than 16 memory blocks in the avg es
#which correspond to the same cache set
free_groups <- calc_free_bins_avg(associativity, groups)
#groups * 2 for management overhead
saved_prime_probes <- free_groups * del_number - (groups * 2)
if(saved_prime_probes > last_saved_prime_probes || last_saved_prime_probes == 0){
last_saved_prime_probes <- saved_prime_probes
} else{
print(paste0("saved:", last_saved_prime_probes, " group: ", groups))
return(del_number-1)
}
}
return("error")
}
get_contract_perfect_del_number(16, 150)
get_contract_perfect_del_number <- function(associativity, avg_es_size, avg_prime_probe_time=0){
last_saved_prime_probes <- 0
for(del_number in 1:50){
groups <- avg_es_size / del_number
#unrealistic assumption, cause actually there are more than 16 memory blocks in the avg es
#which correspond to the same cache set
free_groups <- calc_free_bins_avg(associativity, groups)
#groups * 2 for management overhead
saved_prime_probes <- free_groups * del_number - (groups * 2)
if(saved_prime_probes > last_saved_prime_probes || last_saved_prime_probes == 0){
last_saved_prime_probes <- saved_prime_probes
} else{
print(paste0("saved:", last_saved_prime_probes, "real_del:",
last_saved_prime_probes + (avg_es_size / (del_number-1))*2,
" groups:", groups))
return(del_number-1)
}
}
return("error")
}
get_contract_perfect_del_number(16, 1000)
get_contract_perfect_del_number <- function(associativity, avg_es_size, avg_prime_probe_time=0){
last_saved_prime_probes <- 0
for(del_number in 1:50){
groups <- avg_es_size / del_number
#unrealistic assumption, cause actually there are more than 16 memory blocks in the avg es
#which correspond to the same cache set
free_groups <- calc_free_bins_avg(associativity, groups)
#groups * 2 for management overhead
saved_prime_probes <- free_groups * del_number - (groups * 2)
if(saved_prime_probes > last_saved_prime_probes || last_saved_prime_probes == 0){
last_saved_prime_probes <- saved_prime_probes
} else{
print(paste0("saved:", last_saved_prime_probes, " real_del:",
last_saved_prime_probes + (avg_es_size / (del_number-1))*2,
" groups:", groups))
return(del_number-1)
}
}
return("error")
}
get_contract_perfect_del_number(16, 1000)
get_contract_perfect_del_number(16, 126)
get_contract_perfect_del_number(16, 68)
setwd("~/MA_2/master-moritz_krebbel-drive_by_cache_attacks//code/r/prime_probe/")
plumber::plumb("plumber.R")$run(port=8000)
