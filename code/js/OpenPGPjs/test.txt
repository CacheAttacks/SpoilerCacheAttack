ChineseRemainder[{3,2,9,15,17,14,24,27,16,35,22,39,28,32,13,42,41,3,66,40,39,37,85,25,99,42,82,2,129,22,44,7,97,138,91,41,80,131,52,25,182,16,16,110,137,61,90,56,28,57,17,253,39,56,177,206,109,38,75,251,32,1,195,229,27,69,73,269,199,180,332,153,262,306,160,351,127,10,331,74,407,349,324,381,402,44,0},{7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463}] 

ChineseRemainder[{3,2,9,15},{7,11,13,17}] 


Mod[169969824937702861987945206901335199677904966829312338103707760191070504244972903673155156209408938581273871632447845412025469114820549354593898416907613970468036988120913663514370441318002457069145401080783665560029713566174633756501115849936054291348011514313490518038497926699346013349490570871765734691031,77622356410624973599991634673847978819436047693023776594871404501054105975506647739536520320036747804430049541116431224079006862923020206941583964171709647061775887136798858932059364959025179]


n mod 1001 = 178

primes less than x
primeInf[x_] := Prime@Range@PrimePi@x
listProduct[x_List] := Times @@ x
listSum[x_List] := Plus @@ x
primes := primeInf@(2^3)
possibleBits := BitLength[listProduct[primes]]
perfectCaseBits := possibleBits - 7*Length[primes]
listProductGCD[x_] := 
 Part[Part[ExtendedGCD[listProduct[primes]/x, x], 2], 
   1]*(listProduct[primes]/x)
GCDValuesPrimes := Map[listProductGCD, primes]
minList := {0, 1, 0, 3}
maxList := {2, 3, 2, 5}
GetExPression[i_] := 
 Symbol["a" <> ToString[i]] > Part[minList, i] && 
  Symbol["a" <> ToString[i]] < Part[maxList, i]
expressions := Map[GetExPression, Range[1, Length[minList]]]
makeVariable[i_] := Symbol["a" <> ToString[i]]
usedVariables := Map[makeVariable, Range[1, Length[minList]]]
listSum[usedVariables*GCDValuesPrimes]
maxValue := 15
allExpressions := 
 Append[Append[
   Append[expressions, 
    x == Mod[listSum[usedVariables*GCDValuesPrimes], 
      listProduct[primes]]], x < maxValue], x > 0]
allExpressions
FindInstance[allExpressions, Append[usedVariables, x], Integers]


Part[Part[Part[GCDValuesPrimes, 1], 2], 2]

FindInstance[x + y == 10 && x > 4 && y < 6 && x < 6, {x, y}]

a := {x, y}
b := {x + y == 10, x > 4, x < 6, y < 6}
FindInstance[b, a]

//BaseForm[listProduct[primes], 2]